package ${packageName}.service.${modelName}.impl;

import com.alibaba.fastjson.JSONObject;
import com.baofoo.framework.crud.common.ResponseEntityDto;
import com.baofoo.framework.crud.service.BaseServiceImpl;
import com.baofoo.framework.crud.utils.CustomPageHepler;
import ${packageName}.business.${modelName}.${domainName}Business;
import ${packageName}.contract.${modelName}.dto.${domainName}Dto;
import ${packageName}.model.${modelName}.${domainName}Entity;
import ${packageName}.service.${modelName}.${domainName}Service;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
/**
* Created by ${author}  on ${dataTime}.
* ${domainDesc}服务接口实现
*/
@Service("${domainFirstWordLowerCase}Service")
@SuppressWarnings("all")
public class ${domainName}ServiceImpl extends BaseServiceImpl implements ${domainName}Service {

private static final Logger LOGGER = LoggerFactory.getLogger(${domainName}ServiceImpl.class);

        @Autowired
        private ${domainName}Business ${domainFirstWordLowerCase}Business;

        //插入${domainDesc}
        @Override
        public ResponseEntityDto<?> insert${domainName}(JSONObject param)  {
            ${domainName}Dto ${domainFirstWordLowerCase}Dto= JSONObject.toJavaObject(param,${domainName}Dto.class);
            ${domainName}Entity ${domainFirstWordLowerCase}Entity=new ${domainName}Entity();
            BeanUtils.copyProperties(${domainFirstWordLowerCase}Dto,${domainFirstWordLowerCase}Entity);
            ${domainFirstWordLowerCase}Business.insert(${domainFirstWordLowerCase}Entity);
            BeanUtils.copyProperties(${domainFirstWordLowerCase}Entity,${domainFirstWordLowerCase}Dto);
            return this.buildSuccesResponseEntityDto(${domainFirstWordLowerCase}Dto);
        }

        //插入${domainDesc}（批量）
        @Override
        public ResponseEntityDto<?> insert${domainName}List(JSONObject param)  {
            List<${domainName}Dto> ${domainFirstWordLowerCase}DtoList= JSONObject.parseArray(param.toJSONString(),${domainName}Dto.class);
            List<${domainName}Entity> dataList=new ArrayList<>();
            ${domainFirstWordLowerCase}DtoList.forEach(item->{
                ${domainName}Entity ${domainFirstWordLowerCase}Entity=new ${domainName}Entity();
                BeanUtils.copyProperties(item,${domainFirstWordLowerCase}Entity);
                dataList.add(${domainFirstWordLowerCase}Entity);
            });
            ${domainFirstWordLowerCase}Business.insertBatch(dataList);
            return this.buildSuccesResponseEntityDto();
        }

        //更新${domainDesc}
        @Override
        public ResponseEntityDto<?> update${domainName}(JSONObject param)  {
            ${domainName}Dto ${domainFirstWordLowerCase}Dto= JSONObject.toJavaObject(param,${domainName}Dto.class);
            ${domainName}Entity ${domainFirstWordLowerCase}Entity=new ${domainName}Entity();
            BeanUtils.copyProperties(${domainFirstWordLowerCase}Dto,${domainFirstWordLowerCase}Entity);
            ${domainFirstWordLowerCase}Business.update(${domainFirstWordLowerCase}Entity);
            BeanUtils.copyProperties(${domainFirstWordLowerCase}Entity,${domainFirstWordLowerCase}Dto);
            return this.buildSuccesResponseEntityDto(${domainFirstWordLowerCase}Dto);
        }

        //查询所有${domainDesc}记录
        @Override
        public ResponseEntityDto<?> queryAll${domainName}List(JSONObject param)  {
            List<${domainName}Entity> resultList=${domainFirstWordLowerCase}Business.getAll();
            List<${domainName}Dto> dataList=new ArrayList<>();
            resultList.forEach(item->{
                ${domainName}Dto ${domainFirstWordLowerCase}Dto=new ${domainName}Dto();
                BeanUtils.copyProperties(item,${domainFirstWordLowerCase}Dto);
                dataList.add(${domainFirstWordLowerCase}Dto);
            });
            return this.buildSuccesResponseEntityDto(dataList);
        }

        //通过条件查询${domainDesc}记录（不分页）
        @Override
        public ResponseEntityDto<?> query${domainName}ListByParam(JSONObject param)  {
            ${domainName}Dto ${domainFirstWordLowerCase}Dto= JSONObject.toJavaObject(param,${domainName}Dto.class);
            ${domainName}Entity queryParam=new ${domainName}Entity();
            BeanUtils.copyProperties(${domainFirstWordLowerCase}Dto,queryParam);
            List<${domainName}Entity> resultList=${domainFirstWordLowerCase}Business.findByObj(queryParam);
            List<${domainName}Dto> dataList=new ArrayList<>();
            resultList.forEach(item->{
                    BeanUtils.copyProperties(item,${domainFirstWordLowerCase}Dto);
                    dataList.add(${domainFirstWordLowerCase}Dto);
            });
            return this.buildSuccesResponseEntityDto(dataList);
        }

        //通过条件查询${domainDesc}记录（分页）
        @Override
        public ResponseEntityDto<?> queryPage${domainName}ListByParam(JSONObject param)  {
            ${domainName}Dto ${domainFirstWordLowerCase}Dto= JSONObject.toJavaObject(param,${domainName}Dto.class);
            Page<${domainName}Dto> page = PageHelper.startPage(param.getIntValue("pageNo"), param.getIntValue("pageSize"));
            ${domainName}Entity queryParam=new ${domainName}Entity();
            BeanUtils.copyProperties(${domainFirstWordLowerCase}Dto,queryParam);
            List<${domainName}Entity> list=${domainFirstWordLowerCase}Business.findByObj(queryParam);
            PageInfo<${domainName}Dto> pageInfo = CustomPageHepler.wrapPageInfo(${domainName}Dto.class, list);
            return this.buildSuccesResponseEntityDto(pageInfo);
        }

        //通过ID查询${domainDesc}记录
        @Override
        public ResponseEntityDto<?> query${domainName}ById(JSONObject param)  {
            ${domainName}Dto ${domainFirstWordLowerCase}Dto= JSONObject.toJavaObject(param,${domainName}Dto.class);
            ${domainName}Entity result=${domainFirstWordLowerCase}Business.getById(${domainFirstWordLowerCase}Dto.getId());
            BeanUtils.copyProperties(result,${domainFirstWordLowerCase}Dto);
            return this.buildSuccesResponseEntityDto(${domainFirstWordLowerCase}Dto);
        }

        //通过Id删除${domainDesc}记录
        @Override
        public ResponseEntityDto<?> delete${domainName}ById(JSONObject param)  {
            ${domainName}Dto ${domainFirstWordLowerCase}Dto= JSONObject.toJavaObject(param,${domainName}Dto.class);
            ${domainFirstWordLowerCase}Business.deleteById(${domainFirstWordLowerCase}Dto.getId());
            return this.buildSuccesResponseEntityDto();
        }

        //批量删除${domainDesc}记录
        @Override
        public ResponseEntityDto<?> deleteBatch${domainName}(JSONObject param)  {
            List<${domainName}Dto> ${domainFirstWordLowerCase}DtoList= JSONObject.parseArray(param.toJSONString(),${domainName}Dto.class);
            List<${domainName}Entity> dataList=new ArrayList<>();
            ${domainFirstWordLowerCase}DtoList.forEach(item->{
                ${domainName}Entity ${domainFirstWordLowerCase}Entity=new ${domainName}Entity();
                BeanUtils.copyProperties(item,${domainFirstWordLowerCase}Entity);
                dataList.add(${domainFirstWordLowerCase}Entity);

            });
            ${domainFirstWordLowerCase}Business.delete(dataList);
            return this.buildSuccesResponseEntityDto();
        }


}
