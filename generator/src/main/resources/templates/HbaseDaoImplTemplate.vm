package ${packageName}.dao.${model}.impl;

import ${packageName}.dao.${model}.${javaDomainName}Dao;
import ${packageName}.model.${model}.${javaDomainName}Entity;
import com.mobanker.bigdata.infrastructures.utils.IdUtils;
import com.mobanker.bigdata.infrastructures.utils.ValidateUtil;
import com.mobanker.framework.exception.HBaseORMException;
import com.mobanker.framework.hbase.dao.impl.BaseDaoImpl;
import com.mobanker.framework.hbase.dao.impl.value.ValueFactory;
import com.mobanker.framework.hbase.dao.model.Page;
import com.mobanker.framework.tracking.EETransaction;
import org.apache.hadoop.hbase.filter.CompareFilter;
import org.apache.hadoop.hbase.filter.FilterList;
import org.apache.hadoop.hbase.filter.RegexStringComparator;
import org.apache.hadoop.hbase.filter.RowFilter;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
* Created by CodeGeneration on ${dataTime}.
* ${domainDesc}
*/
@Repository
public class ${javaDomainName}DaoImpl extends BaseDaoImpl<${javaDomainName}Entity> implements ${javaDomainName}Dao {

    @EETransaction(type = "SQL", name = "${javaDomainName}DaoImpl.save")
    @Override
    public void save(${javaDomainName}Entity entity) throws HBaseORMException {
        this.insert(entity);
    }

    @EETransaction(type = "SQL", name = "${javaDomainName}DaoImpl.saveList")
    @Override
    public void saveList(List<${javaDomainName}Entity> entities) throws HBaseORMException {
        this.insert(entities);
    }

    @EETransaction(type = "SQL", name = "${javaDomainName}DaoImpl.get")
    @Override
    public ${javaDomainName}Entity get(String id) throws HBaseORMException {
        return this.queryById(ValueFactory.TypeCreate(id));
    }


}
