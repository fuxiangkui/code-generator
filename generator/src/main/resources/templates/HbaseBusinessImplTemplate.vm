package ${packageName}.business.${model}.impl;


import ${packageName}.business.${model}.${javaDomainName}Business;
import ${packageName}.constants.ExceptionConstants;
import ${packageName}.contract.PageDto;
import ${packageName}.contract.${model}.dto.${javaDomainName}Dto;
import ${packageName}.dao.${model}.${javaDomainName}Dao;
import ${packageName}.dao.${model}.${javaDomainName}ESDao;
import ${packageName}.exception.CommonException;
import ${packageName}.model.${model}.${javaDomainName}Entity;
import ${packageName}.utils.ValidateUtil;
import com.mobanker.framework.hbase.dao.model.Page;
import com.mobanker.framework.tracking.EETransaction;
import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;


/**
* Created by CodeGeneration on ${dataTime}.
* ${domainDesc}
*/
@Service
public class ${javaDomainName}BusinessImpl implements ${javaDomainName}Business {

    @Autowired
    private ${javaDomainName}Dao ${javaDomainName}Dao;

    @Autowired
    private ${javaDomainName}ESDao ${javaDomainName}ESDao;

    @EETransaction(type = "Service", name = "${javaDomainName}BusinessImpl.save")
    @Override
    public void save(${javaDomainName}Dto dto) throws Exception {
         if (ValidateUtil.isNullOrEmpty(dto.getBillNo()) || ValidateUtil.isNullOrEmpty(dto.getTimestamp())) {
            throw new CommonException(ExceptionConstants.MISSING_REQUIRED_PARAMETERS, ExceptionConstants.MISSING_REQUIRED_PARAMETERS_MSG);
        }

        ${javaDomainName}Entity entity = new ${javaDomainName}Entity();
        BeanUtils.copyProperties(entity, dto);
        entity.setRowKey();
        String currentTime = String.valueOf(System.currentTimeMillis());
        entity.setCreateTime(currentTime);
        entity.setUpdateTime(currentTime);
        ${javaDomainName}Dao.save(entity);
        ${javaDomainName}ESDao.save(entity);
    }

    @EETransaction(type = "Service", name = "${javaDomainName}BusinessImpl.saveList")
    @Override
    public void saveList(List<${javaDomainName}Dto> dtoList) throws Exception {
        if (ValidateUtil.isNullOrEmpty(dtoList)) {
            throw new CommonException(ExceptionConstants.MISSING_REQUIRED_PARAMETERS, ExceptionConstants.MISSING_REQUIRED_PARAMETERS_MSG);
        }

        List<${javaDomainName}Entity> entityList = new ArrayList<${javaDomainName}Entity>();
        for (${javaDomainName}Dto dto : dtoList) {
             if (ValidateUtil.isNullOrEmpty(dto.getBillNo()) || ValidateUtil.isNullOrEmpty(dto.getTimestamp())) {
                throw new CommonException(ExceptionConstants.MISSING_REQUIRED_PARAMETERS, ExceptionConstants.MISSING_REQUIRED_PARAMETERS_MSG);
            }

            ${javaDomainName}Entity entity = new ${javaDomainName}Entity();
            BeanUtils.copyProperties(entity, dto);
            entity.setRowKey();
            String currentTime = String.valueOf(System.currentTimeMillis());
            entity.setCreateTime(currentTime);
            entity.setUpdateTime(currentTime);
            entityList.add(entity);
        }

        ${javaDomainName}Dao.saveList(entityList);
        ${javaDomainName}ESDao.saveList(entityList);

    }

    @EETransaction(type = "Service", name = "${javaDomainName}BusinessImpl.get")
    @Override
    public ${javaDomainName}Dto get(String id) throws Exception {
        if (ValidateUtil.isNullOrEmpty(id)) {
            throw new CommonException(ExceptionConstants.MISSING_REQUIRED_PARAMETERS, ExceptionConstants.MISSING_REQUIRED_PARAMETERS_MSG);
        }

        ${javaDomainName}Entity entity = ${javaDomainName}Dao.get(id);
        ${javaDomainName}Dto dto = null;
        if (!ValidateUtil.isNullOrEmpty(entity)) {
            dto = new ${javaDomainName}Dto();
            BeanUtils.copyProperties(dto, entity);
        }
        return dto;

    }

    @EETransaction(type = "Service", name = "${javaDomainName}BusinessImpl.update")
    @Override
    public void update(${javaDomainName}Dto dto) throws Exception {
         if (ValidateUtil.isNullOrEmpty(dto.getBillNo()) || ValidateUtil.isNullOrEmpty(dto.getTimestamp())) {
            throw new CommonException(ExceptionConstants.MISSING_REQUIRED_PARAMETERS, ExceptionConstants.MISSING_REQUIRED_PARAMETERS_MSG);
        }

        ${javaDomainName}Entity entity = new ${javaDomainName}Entity();
        BeanUtils.copyProperties(entity, dto);
        entity.setRowKey();
        String currentTime = String.valueOf(System.currentTimeMillis());
        entity.setUpdateTime(currentTime);
        ${javaDomainName}Dao.save(entity);
        ${javaDomainName}ESDao.save(entity);
    }

    @EETransaction(type = "Service", name = "${javaDomainName}BusinessImpl.updateList")
    @Override
    public void updateList(List<${javaDomainName}Dto> dtoList) throws Exception {
        if (ValidateUtil.isNullOrEmpty(dtoList)) {
            throw new CommonException(ExceptionConstants.MISSING_REQUIRED_PARAMETERS, ExceptionConstants.MISSING_REQUIRED_PARAMETERS_MSG);
        }

        List<${javaDomainName}Entity> entityList = new ArrayList<${javaDomainName}Entity>();
        for (${javaDomainName}Dto dto : dtoList) {
             if (ValidateUtil.isNullOrEmpty(dto.getBillNo()) || ValidateUtil.isNullOrEmpty(dto.getTimestamp())) {
                throw new CommonException(ExceptionConstants.MISSING_REQUIRED_PARAMETERS, ExceptionConstants.MISSING_REQUIRED_PARAMETERS_MSG);
            }

            ${javaDomainName}Entity entity = new ${javaDomainName}Entity();
            BeanUtils.copyProperties(entity, dto);
            entity.setRowKey();
            String currentTime = String.valueOf(System.currentTimeMillis());
            entity.setUpdateTime(currentTime);
            entityList.add(entity);
        }

        ${javaDomainName}Dao.saveList(entityList);
        ${javaDomainName}ESDao.saveList(entityList);

    }
 
}
